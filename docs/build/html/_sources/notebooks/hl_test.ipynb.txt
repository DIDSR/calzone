{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hosmer-Lemeshow test (HL test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Theoretical Background\n",
    "The Hosmer-Lemeshow test (HL Test) is a statistical test that can be used to assess the calibration of a probabilistic model. The test works by dividing the predicted probabilities into groups (typically deciles) and comparing the observed and expected frequencies of events in each group. A non-significant p-value (usually greater than 0.05) indicates we cannot reject the hypothesis that the model is well-calibrated, while a significant p-value suggests the opposite. The Hosmer-Lemeshow test is widely used in the literature and industry since it is simple to implement and interpret.\n",
    "\n",
    "In order to calculate the Hosmer-Lemeshow test statistic, we need to first determine the binning scheme used to divide the predicted probabilities into groups. Conventionally, the predicted probabilities are divided into 10 equal-width bins. We will label the equal-width binning Hosmer-Lemeshow test as HL-H and equal-count binning Hosmer-Lemeshow test as HL-C. The Hosmer-Lemeshow test statistic is then calculated as follows:\n",
    "\n",
    "$$\n",
    "\\text{HL} = \\sum_{m=1}^{M} \\left[\\frac{(O_{1,m}-E_{1,m})^2}{E_{1,m}} + \\frac{(O_{0,m}-E_{0,m})^2}{E_{0,m}}\\right]  = \\sum_{m=1}^{M} \\frac{(O_{1,m}-E_{1,m})^2}{E_{1,m}(1-\\frac{E_{1,m}}{N_m})} \\sim \\chi^2_{M-2}\n",
    "$$\n",
    "\n",
    "where $E_{1,m}$ is the expected number of class 1 events in the $\\text{m}^{th}$ bin, $O_{1,m}$ is the observed number of class 1 events in the $\\text{m}^{th}$ bin, $N_m$ is the total number of observations in the $\\text{m}^{th}$ bin, and $M$ is the number of bins. The HL test statistic is distributed as a chi-squared distribution with $M-2$ degrees of freedom. We can then use this test statistic to calculate the p-value for the test and determine whether we can reject the null hypothesis that the model is well-calibrated. Notice that the degree of freedom of HL test is $M-2$ by default but some literature suggests that the degree of freedom should be $M$ instead when the samples is not used for training. We provides the option to specify the degree of freedom in the `calzone`. The default value is still $M-2$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "vscode": {
     "languageId": "plaintext"
    }
   },
   "source": [
    "## Pros of HL test\n",
    "\n",
    "The Hosmer-Lemeshow test offers several advantages in assessing calibration. It is a non-parametric test, meaning it does not require any assumptions about the distribution of the predicted probabilities, and it provides statistical meaning to the resulting test statistic. It is also very intuitive and easy to understand since it is just a chi-square based test. It can be calculated from the result of the reliability diagram. The HL test is widely used in the literature as a validation method for model calibration."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cons of HL Test\n",
    "\n",
    "Many studies have shown that the HL test is not an ideal way to examine the calibration of a model. The biggest problem is that the HL test depends on the binning scheme used. Whether equal-width or equal-count binning and the number of bins used can affect the results of the HL test. It is shown that the standard 10 equal-width bins often have the wrong size and low statistical power. Therefore, it is recommended not to use the HL test to examine the calibration of a model. However, the HL test is still a useful tool to quickly check the calibration of a model and provide a reference for the calibration of a model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating HL test statistics and p-value with calzone\n",
    "\n",
    "There are again two ways to calculate the HL test statistics and p-value with calzone. One is to call the function explicitly, and the other is to use the calzone.metrics.CalibrationMetrics class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HL-H Test Statistic:  8.884991559088098\n",
      "HL-H p-value:  0.35209071874348785\n"
     ]
    }
   ],
   "source": [
    "from calzone.utils import reliability_diagram,data_loader\n",
    "from calzone.metrics import hosmer_lemeshow_test\n",
    "import numpy as np\n",
    "\n",
    "### loading the data\n",
    "wellcal_dataloader = data_loader(data_path=\"../../../example_data/simulated_welldata.csv\")\n",
    "\n",
    "### calculating the HL-H TS\n",
    "reliability,confindence,bin_edges,bin_counts = reliability_diagram(wellcal_dataloader.labels,wellcal_dataloader.probs,num_bins=10, class_to_plot=1, is_equal_freq=False)\n",
    "\n",
    "HL_H_ts,HL_H_p,df = hosmer_lemeshow_test(reliability,confindence,bin_count=bin_counts)\n",
    "print(\"HL-H Test Statistic: \",HL_H_ts)\n",
    "print(\"HL-H p-value: \",HL_H_p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HL-C Test Statistic:  3.694947603203135\n",
      "HL-C p-value:  0.8835446575708198\n"
     ]
    }
   ],
   "source": [
    "### similar for HL-C model\n",
    "reliability,confindence,bin_edges,bin_counts = reliability_diagram(wellcal_dataloader.labels,wellcal_dataloader.probs,num_bins=10, class_to_plot=1, is_equal_freq=True)\n",
    "\n",
    "HL_C_ts,HL_C_p,df = hosmer_lemeshow_test(reliability,confindence,bin_count=bin_counts)\n",
    "print(\"HL-C Test Statistic: \",HL_C_ts)\n",
    "print(\"HL-C p-value: \",HL_C_p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see the result from equal-width binning and equal-count binning are different. We will demostrate how to use the calzone.metrics.CalibrationMetrics class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'HL-H score': 8.884991559088098,\n",
       " 'HL-H p-value': 0.35209071874348785,\n",
       " 'HL-C score': 3.694947603203135,\n",
       " 'HL-C p-value': 0.8835446575708198}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### using the CalibrationMetrics class\n",
    "from calzone.metrics import CalibrationMetrics\n",
    "calmetrics = CalibrationMetrics(class_to_calculate=1)\n",
    "calmetrics.calculate_metrics(wellcal_dataloader.labels, wellcal_dataloader.probs, metrics=['HL-H', 'HL-C'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Size of HL test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will show the size of HL test. Notice that the size of HL test had been shown to depend on sample size, number of bin and binning scheme (Hosmer et. al. 1997). We will generate fake data to show the size of HL test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "### The size of HL Test\n",
    "from calzone.utils import fake_binary_data_generator\n",
    "np.random.seed(123)\n",
    "fakedata_generator = fake_binary_data_generator(alpha_val=0.5, beta_val=0.5)\n",
    "cal_metrics = CalibrationMetrics()\n",
    "sample_size = 1000\n",
    "simulation_size = 10000\n",
    "results = []\n",
    "# generate data\n",
    "for i in range(simulation_size):\n",
    "    X, y = fakedata_generator.generate_data(sample_size)\n",
    "    if i == 0:\n",
    "        tempresult = cal_metrics.calculate_metrics(y, X, ['HL-H', 'HL-C'],return_numpy=False)\n",
    "        keys = list(tempresult.keys())\n",
    "        results.append(np.array(list(tempresult.values())))\n",
    "    else:\n",
    "        tempresult = cal_metrics.calculate_metrics(y, X, ['HL-H', 'HL-C'],return_numpy=True)\n",
    "        results.append(tempresult)\n",
    "results = np.array(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The size of HL-H is : 0.117\n",
      "The size of HL-C is : 0.116\n"
     ]
    }
   ],
   "source": [
    "### Showing the size of the model\n",
    "import matplotlib.pyplot as plt\n",
    "hl_h_pvalue = results[:,1]\n",
    "hl_c_pvalue = results[:,3]\n",
    "size_h = np.mean(hl_h_pvalue < 0.05)\n",
    "size_c = np.mean(hl_c_pvalue < 0.05)\n",
    "print(\"The size of HL-H is :\", round(size_h,3))\n",
    "print(\"The size of HL-C is :\", round(size_c,3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'P-value distribution of the HL test')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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uzq3o6/79+9DCAEvLy+197y9vTWu383NTeW1ra0tAChPfWhS3Ia29RQWFuL+/fv6Fa+Dp2sFiup9stb//vsPZ86cUfs9c3JyghACd+7cKXU9VlZWaNmypcbhyTBnLP/99x8ePHgAmUymth1paWnKbahbty5+/fVXuLu7Y8yYMahbty7q1q2LxYsXG71Gqpx4tRSZlYYNGyqvlnpa9+7dcezYMY3vvf7664iKikJMTAw++eQTfPfdd+jVqxeqV6+unGfdunUICAjA5s2bVTo05ubmllqXXC7XOO/THyA1atQAAHzxxRdar+558kjH09zc3JCWlqY2XdM0TXr27ImePXsiNzcXhw8fxpw5c/DGG2/A398foaGhpS6vqeNvSUqqtfgD+sl9VxwoAPV9p4/q1avDysoKqampau8VdxIu/lmUR/E2aFuPlZWVyu9YRapRowbs7OywatUqre9XdsWdu4v7yzzNyclJOd6uXTu0a9cOBQUFOH78OL744gtMmDABHh4e6N+/f0WVTJUEww1ZDDc3N43faIGiD7tevXph7dq1CA0NRVpamtopKYlEAplMpvIBnpaWptPVUsVX7Zw5cwaBgYHK6du3b1eZr23btqhWrRrOnTtXphvcdejQAfPmzcMff/yhcmpqw4YNerVja2uLsLAwVKtWDb/88gtOnTqF0NBQnY5W6GPv3r3477//lIGtoKAAmzdvRt26deHj4wNAdd8VnzoDgJ9//llj3brU5uDggFatWmHLli2YP3++8hRKYWEh1q1bBx8fH633mNFHYGAgatWqhQ0bNiA6Olr5u5OZmYnY2FjlFVT6MsTP4eWXX8bs2bPh5uaGgICAMrdTEbT9XF9++WVs2rQJBQUFaNWqlU5tWVtbo1WrVmjQoAHWr1+PkydPon///gb/3abKjeGGqoyhQ4di8+bNGDt2LHx8fPDiiy+qvP/yyy9jy5YtGD16NPr27Ytr167h448/hpeXFy5dulRi28899xwCAwMRHR2N/Px8VK9eHVu3blVeLVPM0dERX3zxBQYNGoR79+6hb9++cHd3x+3bt/HHH3/g9u3bWLZsmdb1TJgwAatWrUK3bt0wa9YseHh4YP369crTbSX56KOPcP36dXTs2BE+Pj548OABFi9eDKlUqrzvSt26dWFnZ4f169ejYcOGcHR0hLe3t/JUjr5q1KiBF154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KY5MzNYW+P77x+NVgFxmDam1BHFn0wzettRagsg2/gw4RERGVqZw06tXLwOXQZWSjU3R/W2qEGe5FJFt/JGjKDBou3czFYg7m4YcRQHDDRGRkZUp3EybNs3QdRBVGs5yKQMIEZEZK1OHYgB48OABvv32W0yePBn37t0DUHQ66saNGwYrjkwsPx/44YeiIT/f1NUQERHppExHbs6cOYMXX3wRLi4uuHLlCkaMGAFXV1ds3boVV69exdq1aw1dJ5lCbi7w2mtF448eFZ2monIxRkdlY2InaCIyR2X6tIqKisLgwYMxb948ODk5Kad36dIFb7zxhsGKI7IUxuyobEzsBE1E5qhM4ebYsWNYsWKF2vRatWohLc28/nkTVQRjdVQ2JnaCJiJzVaZwI5fLkZ6erjb9woULqFmzZrmLIrJE7KhMRFQxytShuGfPnpg5cyby8vIAABKJBCkpKXj//ffRp08fgxZIREREpI8yhZv58+fj9u3bcHd3R3Z2NsLCwlCvXj04OTnhk08+MXSNRERERDor02kpZ2dnHDx4EPv27cOJEydQWFiIZ599Fi+++KKh6yMiIiLSi97hprCwEDExMdiyZQuuXLkCiUSCgIAAeHp6QggBiURijDrJFGQyYPXqx+NERERmQK9wI4RAjx49sGvXLgQFBaFp06YQQuD8+fMYPHgwtmzZgm3bthmpVKpwUikweLCpqyAiItKLXuEmJiYG+/fvx969e9GhQweV93777Tf06tULa9euRWRkpEGLJCIiItKVXh2KN27ciA8++EAt2ADACy+8gPfffx/r1683WHFkYvn5wM6dRQMfv0BERGZCr3Bz5swZvPTSS1rf79KlC/74449yF0WVRG4u8PLLRUNurqmrISIi0ole4ebevXvw8PDQ+r6Hhwfu379f7qKIiIiIykqvcFNQUACbEh6eaG1tjXyeviAiIiIT0vtqqcGDB8PW1lbj+7k8dUFEREQmple4GTRoUKnz8EopIiIiMiW9ws3q4hu6EREREVVSZXq2FBEREVFlZdJws3//fnTv3h3e3t6QSCQ63d04MTERwcHBkMvlqFOnDpYvX278QqsqmQz48suigY9fICIiM1GmB2caSmZmJoKCgjBkyBD06dOn1PmTk5PRtWtXjBgxAuvWrcPvv/+O0aNHo2bNmjotT3qSSoExY0xdBZnY3UyFUdqV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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "value,_,_=plt.hist(hl_h_pvalue, bins=20, density=True, alpha=0.5, label='Equal-width binning',histtype='step')\n",
    "plt.vlines(size_h,ymin=0,ymax=np.max(value),linestyle='--',label=r'Size of equal-width bin ($\\alpha=0.05$) = '+str(round(size_h,3)),colors='r')\n",
    "plt.legend(loc='upper right')\n",
    "plt.xlabel('p-value')\n",
    "plt.ylabel('Density')\n",
    "plt.title('P-value distribution of the HL test')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'P-value distribution of the HL test')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "value,_,_=plt.hist(hl_c_pvalue, bins=20, density=True, alpha=0.5, label='Equal-count binning',histtype='step')\n",
    "plt.vlines(size_c,ymin=0,ymax=np.max(value),linestyle='--',label=r'Size of equal-count bin ($\\alpha=0.05$) = '+str(round(size_c,3)),colors='r')\n",
    "plt.legend(loc='upper right')\n",
    "plt.xlabel('p-value')\n",
    "plt.ylabel('Density')\n",
    "plt.title('P-value distribution of the HL test')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that both the equal-width and the equal-count method have the incorrect size. The simulation support the claim that the degree of freedom should be M instead of M-2. We can show it with simulation. We are not proving the claim here since it is beyond the scope of this documentation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The size of HL-H with df=M is : 0.047\n",
      "The size of HL-C with df=M  is : 0.055\n"
     ]
    }
   ],
   "source": [
    "### The size of HL Test\n",
    "from calzone.utils import fake_binary_data_generator\n",
    "from importlib import reload\n",
    "import calzone.metrics\n",
    "reload(calzone.metrics)\n",
    "from calzone.metrics import CalibrationMetrics\n",
    "np.random.seed(123)\n",
    "fakedata_generator = fake_binary_data_generator(alpha_val=0.5, beta_val=0.5)\n",
    "cal_metrics = CalibrationMetrics()\n",
    "sample_size = 1000\n",
    "simulation_size = 10000\n",
    "results = []\n",
    "# generate data\n",
    "for i in range(simulation_size):\n",
    "    X, y = fakedata_generator.generate_data(sample_size)\n",
    "    if i == 0:\n",
    "        tempresult = cal_metrics.calculate_metrics(y, X, ['HL-H', 'HL-C'],return_numpy=False, df = 10)\n",
    "        keys = list(tempresult.keys())\n",
    "        results.append(np.array(list(tempresult.values())))\n",
    "    else:\n",
    "        tempresult = cal_metrics.calculate_metrics(y, X, ['HL-H', 'HL-C'],return_numpy=True, df = 10)\n",
    "        results.append(tempresult)\n",
    "results = np.array(results)\n",
    "\n",
    "hl_h_pvalue = results[:,1]\n",
    "hl_c_pvalue = results[:,3]\n",
    "size_h = np.mean(hl_h_pvalue < 0.05)\n",
    "size_c = np.mean(hl_c_pvalue < 0.05)\n",
    "print(\"The size of HL-H with df=M is :\", round(size_h,3))\n",
    "print(\"The size of HL-C with df=M  is :\", round(size_c,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reference\n",
    "\n",
    "Hosmer, D. W., & Lemesbow, S. (1980). Goodness of fit tests for the multiple logistic regression model. Communications in statistics-Theory and Methods, 9(10), 1043-1069.\n",
    "\n",
    "Hosmer, D. W., Hosmer, T., Cessie, S. L., & Lemeshow, S. (1997). A COMPARISON OF GOODNESS-OF-FIT TESTS FOR THE LOGISTIC REGRESSION MODEL. 16.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "uq",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
